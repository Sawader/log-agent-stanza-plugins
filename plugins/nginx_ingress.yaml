
version: 0.0.6
title: Nginx Ingress
description: Log parser for Nginx Ingress for Kubernetes
supported_platforms:
  - kubernetes
parameters:
  - name: log_format
    label: Log Format
    description: When choosing the 'default' option, the agent will expect and parse logs in a format that matches the default logging configuration. When choosing the 'observIQ' option, the agent will expect and parse logs in an optimized JSON format that adheres to the observIQ specification, requiring an update to the nginx config map. See the <a href="https://docs.observiq.com/docs/nginx-ingress-controller">NGINX Ingress Controller source page</a> for more information.
    type: enum
    valid_values:
      - default
      - observiq
    default: default
  - name: cluster_name
    label: Cluster Name
    description: 'Cluster Name to be added to a resource label'
    type: string
  - name: pod_name
    label: Pod Name
    description: The pod name (without the unique identifier on the end)
    type: string
    required: true
  - name: container_name
    label: Container Name
    description: The container name of the Nginx container
    type: string
    default: "*"
  - name: enable_access_log
    label: Access Logs
    description: Enable to collect Nginx access logs
    type: bool
    default: true
  - name: enable_error_log
    label: Error Logs
    description: Enable to collect Nginx error logs
    type: bool
    default: true
  - name: start_at
    label: Start At
    description: Start reading kubernetes log files from 'beginning' or 'end'
    type: enum
    valid_values:
      - beginning
      - end
    default: end

# Set Defaults
# {{$enable_access_log := default true .enable_access_log}}
# {{$enable_error_log := default true .enable_error_log}}
# {{$start_at := default "end" .start_at}}
# {{$pod_name := .pod_name}}
# {{$container_name := default "*" .container_name}}
# {{$cluster_name := default "" .cluster_name}}
# {{$log_format := default "default" .log_format}}

# Pipeline Template
pipeline:
  - id: kubernetes_input
    type: kubernetes_container
    pod_name: '{{ $pod_name }}'
    container_name: '{{ $container_name }}'
    cluster_name: '{{ $cluster_name }}'
    start_at: '{{ $start_at }}'
    enable_nested_json_parser: false

  - id: k8s_input_router
    type: router
    routes:
      # {{ if $enable_access_log }}
      - expr: "$labels.stream == 'stdout'"
        output: access_parser
        labels:
          log_type: 'nginx.ingress.access'
          plugin_id: '{{ .id }}'
      # {{ end }}
      # {{ if $enable_error_log }}
      - expr: '$labels.stream == "stderr" and $record matches "\\d{4}\\/\\d{2}\\/\\d{2} \\d{2}:\\d{2}:\\d{2} \\[\\w+\\] \\d+\\.\\d+: "'
        output: error_regex_parser
        labels:
          log_type: 'nginx.ingress.error'
          plugin_id: '{{ .id }}'
      - expr: '$labels.stream == "stderr"'
        output: ingress_controller_regex_parser
        labels:
          log_type: 'nginx.ingress.controller'
          plugin_id: '{{ .id }}'
      # {{ end }}

  # {{ if $enable_access_log }}
    # {{ if eq $log_format "default" }}
  - id: access_parser
    type: regex_parser
    regex: '(?P<remote_addr>\S+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) +(?P<path>[^ ]*) ((?P<protocol>[^/]*)/(?P<protocol_version>.*)|.*)?" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>\S+)" "(?P<http_user_agent>[^"]+)" (?P<request_length>\d+) (?P<request_time>[\d\.]+) \[(?P<proxy_upstream_name>[^\]]*)\] \[(?P<proxy_alternative_upstream_name>\s*)\] (?P<upstream_addr>\S+) (?P<upstream_response_length>[\d-]+) (?P<upstream_response_time>[\d\.-]+) (?P<upstream_status>[\d-]+) (?P<request_id>[a-z0-9]+)'
    timestamp:
      parse_from: time_local
      layout: '%d/%b/%Y:%H:%M:%S %z'
    severity:
      parse_from: status
      preserve_to: status
      mapping:
        info: 2xx
        notice: 3xx
        warning: 4xx
        error: 5xx
    output: {{ .output }}
    # {{ end }}

    # {{ if eq $log_format "observiq" }}
  - id: access_parser
    type: json_parser
    timestamp:
      parse_from: time_local
      layout: '%d/%b/%Y:%H:%M:%S %z'
    severity:
      parse_from: status
      preserve_to: status
      mapping:
        info: 2xx
        notice: 3xx
        warning: 4xx
        error: 5xx

  - id: request_parser
    type: regex_parser
    parse_from: $record.request
    preserve_to: $record.request
    if: '$record.request != nil and $record.request matches "\\S+ +[^ ]* "'
    regex: '(?P<method>\S+) +(?P<path>[^ ]*) ((?P<protocol>[^/]*)/(?P<protocol_version>.*)|.*)?'
    output: {{ .output }}
    # {{ end }}
  # {{ end }}

  # {{ if $enable_error_log }}
  # NGINX sends all ingress controller logs to stderr.
  # The ingress controller uses the same container for two services instead of a separate container for each.
  - id: ingress_controller_regex_parser
    type: regex_parser
    regex: '(?P<severity>\w)(?P<timestamp>\d{4} \d{2}:\d{2}:\d{2}.\d+)\s+(?P<pid>\d+)\s+(?P<source>[^ \]]+)\] (?P<message>.*)'
    severity:
      mapping:
        info: i
        debug: d
        error: e
        warning: w
        critical: c
      parse_from: severity
    timestamp:
      layout: "%m%d %H:%M:%S.%s"
      parse_from: timestamp
    output: {{ .output }}

  - id: error_regex_parser
    type: regex_parser
    regex: '^(?P<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<log_level>\w+)\] (?P<pid>\d+).(?P<tid>\d+): (?P<message>.*)'
    timestamp:
      parse_from: time
      layout: '%Y/%m/%d %T'
    severity:
      parse_from: log_level
      mapping:
        critical: crit
        emergency: emerg
    output: {{ .output }}
  # {{ end }}