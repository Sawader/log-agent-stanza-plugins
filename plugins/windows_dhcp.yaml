
# Plugin Info
version: 0.0.7
title: Windows DHCP
description: Log parser for Windows DHCP
supported_platforms: 
  - windows
parameters:
  - name: file_path
    label: Log Path
    description: The absolute path to the DHCP logs
    type: string
    default: 'C:\Windows\System32\dhcp\DhcpSrvLog-*.log'
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
      - beginning
      - end
    default: end

# Set Defaults
# {{$file_path := default "C:\\Windows\\System32\\dhcp\\DhcpSrvLog-*.log" .file_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  - id: windows_dhcp_input
    type: file_input
    fingerprint_size: 4Kib # long, to look past boilerplate preamble
    include:
      - {{ $file_path }}
    start_at: {{ $start_at }}
    labels:
      log_type: windows_dhcp
      plugin_id: {{ .id }}
    output: filter_router

  - id: filter_router
    type: router
    routes:
      - output: log_start_filter
        expr: '$record matches "^\\t\\tMicrosoft DHCP"'
      - output: log_start_filter
        expr: '$record matches "^Event ID  Meaning"'
      - output: log_start_filter
        expr: '$record matches "^\\d*\tThe log was started"'
      - output: log_start_filter
        expr: '$record matches "^QResult: "'
      - output: log_start_filter
        expr: '$record matches "^ID,Date,Time,Description,"'
      - output: windows_dhcp_parser
        expr: '$record matches "^\\d+,\\d{2}\\/\\d{2}\\/\\d{2},\\d{2}:\\d{2}:\\d{2}"'

  # This section filters out log description entries gathered from start of log file
  - id: log_start_filter
    type: filter
    expr: true

  - id: windows_dhcp_parser
    type: regex_parser
    regex: '^(?P<id>\d+),(?P<timestamp>\d{2}\/\d{2}\/\d{2},\d{2}:\d{2}:\d{2}),(?P<description>[^,]+),(?P<ip_address>[^,]*),(?P<hostname>[^,]*),(?P<mac_address>[^,]*),(?P<username>[^,]*),(?P<transaction_id>[^,]*),(?P<q_result>[^,]*),(?P<probation_time>[^,]*),(?P<correlation_id>[^,]*),(?P<dhc_id>[^,]*),(?P<vendor_class_hex>[^,]*)(,(?P<vendor_class_ascii>[^,]*),(?P<user_Class_hex>[^,]*),(?P<user_class_ascii>[^,]*),(?P<relay_agent_info>[^,]*),(?P<dns_reg_error>[^,]*))?'
    timestamp:
      parse_from: timestamp
      layout: '%m/%d/%y,%H:%M:%S'
    output: {{.output}}