
version: 0.0.6
title: Apache Cassandra
description: Log parser for Apache Cassandra
parameters:
  - name: enable_system_logs
    label: Enable System Logs
    description: Enable collection of Cassandra system logs
    type: bool
    default: true
  - name: system_log_path
    label: Apache Cassandra System Log Path
    description: Path to the Apache Cassandra system log file.
    type: string
    default: "/var/log/cassandra/cassandra.log"
    relevant_if:
      enable_system_logs:
        equals: true
  - name: enable_debug_logs
    label: Enable Debug Logs
    description: Enable collection of Cassandra debug logs
    type: bool
    default: true
  - name: debug_log_path
    label: Apache Cassandra Debug Log Path
    description: Path to the Apache Cassandra debug log file.
    type: string
    default: "/var/log/cassandra/debug.log"
    relevant_if:
      enable_debug_logs:
        equals: true
  - name: enable_gc_logs
    label: Enable Garbage Collection Logs
    description: Enable collection of Cassandra garbage collection logs
    type: bool
    default: true
  - name: gc_log_path
    label: Apache Cassandra Garbage Collection Log Path
    description: Path to the Apache Cassandra garbage collection log file.
    type: string
    default: "/var/log/cassandra/gc.log"
    relevant_if:
      enable_gc_logs:
        equals: true
  - name: start_at
    label: Start At
    description: "Start reading file from 'beginning' or 'end'"
    type: enum
    valid_values:
     - beginning
     - end
    default: end

# Set Defaults
# {{$enable_system_logs := default true .enable_system_logs}}
# {{$system_log_path := default "/var/log/cassandra/cassandra.log" .system_log_path}}
# {{$enable_debug_logs := default true .enable_debug_logs}}
# {{$debug_log_path := default "/var/log/cassandra/debug.log" .debug_log_path}}
# {{$enable_gc_logs := default true .enable_gc_logs}}
# {{$gc_log_path := default "/var/log/cassandra/gc.log" .gc_log_path}}
# {{$start_at := default "end" .start_at}}

pipeline:
  # {{ if $enable_system_logs }}
  - id: system_log_reader
    type: file_input
    include:
      - {{ $system_log_path }}
    multiline:
      line_start_pattern: '[A-Z]+\s+\[[^\]]+\]'
    start_at: {{ $start_at }}
    labels:
      log_type: 'cassandra.system'
      plugin_id: {{ .id }}
    output: regex_parser
  #  {{ end }}

  # {{ if $enable_debug_logs }}
  - id: debug_log_reader
    type: file_input
    include:
      - {{ $debug_log_path }}
    multiline:
      line_start_pattern: '^[A-Z]+\s+\[[a-z]+\]\s\d{4}-\d{2}-\d{2}'
    start_at: {{ $start_at }}
    labels:
      log_type: 'cassandra.debug'
      plugin_id: {{ .id }}
    output: regex_parser
  #  {{ end }}

  # {{ if $enable_gc_logs }}
  - id: gc_log_reader
    type: file_input
    include:
      - {{ $gc_log_path }}
    multiline:
      line_start_pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{4}|^OpenJDK|^Memory:|^CommandLine|^Heap'
    start_at: {{ $start_at }}
    labels:
      log_type: 'cassandra.gc'
      plugin_id: {{ .id }}

  - id: gc_rex_parser
    type: regex_parser
    if: '$record matches "[0-9]{4}-[0-9]{2}-[0-9]{2}T"' 
    regex: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{4}):\s+.*stopped: (?P<total_stopped_seconds>[\d\.]+).* took: (?P<stopping_threads_seconds>[\d\.]+)'
    timestamp:
      parse_from: timestamp
      layout: '%FT%T.%L%z'
    output: {{ .output }}
    #  {{ end }}

  - id: regex_parser
    type: regex_parser
    regex: '(?P<cassandra_severity>[A-Z]+)\s+\[(?P<type>[^\]]+)\]\s+(?P<time1>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}),(?P<time2>\d+)\s+(?P<message>.*\S)'
    severity:
      parse_from: cassandra_severity

  # Due to limitations in golang time we cannot have a comma in our timestamp we split timestamp into two fields 'time1' and 'time2'.
  # This will combine and remove 'time1' and 'time2' fields into a timestamp field.
  - id: timestamp_restructurer
    type: restructure
    ops:
      - add:
          field: timestamp
          value_expr: '$record.time1 + "." + $record.time2'
      - remove: time1
      - remove: time2

  - type: time_parser
    parse_from: timestamp
    layout: '%F %T.%L'
    output: {{ .output }}