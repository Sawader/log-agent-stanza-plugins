
# Plugin Info
version: 0.0.3
title: PgBouncer
description: Log parser for PgBouncer
parameters:
  - name: file_path
    label: PgBouncer Logs Path
    description: The absolute path to the PgBouncer logs
    type: string
    default: "/var/log/pgbouncer/pgbouncer.log"
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
      - beginning
      - end
    default: end

# Set Defaults
# {{$file_path := default "/var/log/pgbouncer/pgbouncer.log" .file_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  - id: pgbouncer_input
    type: file_input
    include:
      - {{ $file_path }}
    start_at: {{ $start_at }}
    labels:
      log_type: pgbouncer
      plugin_id: {{ .id }}
    output: pgbouncer_parser

  - id: pgbouncer_parser
    type: regex_parser
    regex: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}.\d{3}(\s*[^\d\s]{3})?)\s*(\[)?(?P<pid>\d+)(\])? (?P<severity>\w+) (?P<message>.*)'
    severity:
      parse_from: severity
      mapping:
        critical: fatal
        info: log
        notice: stats
        debug: noise
    output: time_parser_router

  # Handle different timestamps
  - id: time_parser_router
    type: router
    default: message_router
    routes:
      - output: time_parser_with_timezone
        expr: '$record.timestamp != nil and $record.timestamp matches "^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}.\\d{3}\\s[^\\d\\s]{3}"'
      - output: time_parser_without_timezone
        expr: '$record.timestamp != nil and $record.timestamp matches "^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}.\\d{3}"'

  - id: time_parser_with_timezone
    type: time_parser
    parse_from: $record.timestamp
    layout: '%Y-%m-%d %H:%M:%S.%L %Z'
    output: message_router

  - id: time_parser_without_timezone
    type: time_parser
    parse_from: $record.timestamp
    layout: '%Y-%m-%d %H:%M:%S.%L'
    output: message_router

  - id: message_router
    type: router
    default: {{ .output }}
    routes:
      - expr: '$record.message matches "^[Ss]tats: "'
        output: stats_parser
      - expr: '$record.message matches "^[CS]-\\w*"'
        output: request_parser

  - id: stats_parser
    type: regex_parser
    parse_from: $record.message
    regex: '^[Ss]tats: (?P<xacts_per_second>\d+)[^,]*,\s(?P<queries_per_second>\d+)[^,]*,\sin\s(?P<in_bytes_per_second>\d+)[^,]*,\sout\s(?P<out_bytes_per_second>\d+)[^,]*,\sxact\s(?P<xact_microsecond>\d+)[^,]*,\squery\s(?P<query_microsecond>\d+)\sus(,)?\swait(\stime)?\s(?P<wait_time_microsecond>\d+).*'
    output: {{ .output }}

  - id: request_parser
    type: regex_parser
    parse_from: $record.message
    regex: '^[CS]-\w*:\s(\()?(?P<db_name>\w*)(\))?\/(\()?(?P<user_name>\w*)(\))?@(?P<host>[^:]*):(?P<port>\d*)\s*(?P<message>[^\(]*)(\s*\(age=(?P<age>\d*)s\))?'
    output: {{ .output }}