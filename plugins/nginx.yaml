
version: 0.0.15
title: Nginx
description: Log parser for Nginx
min_stanza_version: 0.13.12
supported_platforms:
  - linux
  - windows
  - macos
  - kubernetes
parameters:
  - name: source
    label: Log Source
    description: Specifies where the logs are located. When choosing the 'file' option, the agent reads logs from the log path(s) specified. When choosing the 'Kubernetes' option, logs are read from /var/log/containers based on the Pod and Container specified.
    type: enum
    valid_values:
      - file
      - kubernetes
    default: file
  - name: log_format
    label: Log Format
    description: Specifies the format of the access log entries. When choosing 'default', the agent will expect the log entries to match the default nginx log format. When choosing 'observiq', the agent will expect the log entries to match an optimized JSON format that adheres to the observIQ specification. See the Nginx documentation for more information. 
    type: enum
    valid_values:
      - default
      - observiq
    default: default
  - name: cluster_name
    label: Cluster Name
    description: Cluster name to be added as a resource label. Used when source is set to kubernetes.
    type: string
    default: ""
    relevant_if:
      source:
        equals: kubernetes
  - name: pod_name
    label: Pod Name
    description: The pod name without the unique identifier on the end. It should match the deployment, daemonset, statefulset or other resource name. Used when source is set to kubernetes.
    type: string
    default: 'nginx'
    relevant_if:
      source:
        equals: kubernetes
  - name: container_name
    label: Container Name
    description: The container name, useful if the pod has more than one container. Used when source is set to kubernetes.
    type: string
    default: "*"
    relevant_if:
      source:
        equals: kubernetes
  - name: enable_access_log
    label: Access Logs
    description: Enable access log collection.
    type: bool
    default: true
  - name: access_log_path
    label: Access Log Path
    description: Path to access log file.
    type: string
    default: "/var/log/nginx/access.log*"
    relevant_if:
      source:
        equals: file
      enable_access_log:
        equals: true
  - name: enable_error_log
    label: Error Logs
    description: Enable error log collection.
    type: bool
    default: true
  - name: error_log_path
    label: Error Log Path
    description: Path to error log file.
    type: string
    default: "/var/log/nginx/error.log*"
    relevant_if:
      source:
        equals: file
      enable_error_log:
        equals: true
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'.
    type: enum
    valid_values:
      - beginning
      - end
    default: end
  - name: encoding
    label: Encoding
    description: Specify the encoding of the file(s) being read. In most cases, you can leave the default option selected.
    type: enum
    valid_values:
      - utf-8
      - utf-16le
      - utf-16be
      - ascii
      - big5
    default: utf-8

# Set Defaults
# {{$source := default "file" .source}}
# {{$log_format := default "default" .log_format}}
# {{$cluster_name := default "" .cluster_name}}
# {{$pod_name := default "nginx" .pod_name}}
# {{$container_name := default "*" .container_name}}
# {{$enable_access_log := default true .enable_access_log}}
# {{$access_log_path := default "/var/log/nginx/access.log*" .access_log_path}}
# {{$enable_error_log := default true .enable_error_log}}
# {{$error_log_path := default "/var/log/nginx/error.log*" .error_log_path}}
# {{$start_at := default "end" .start_at}}
# {{$encoding := default "utf-8" .encoding}}

# Pipeline Template
pipeline:
  # {{ if eq $source "kubernetes" }}
  - id: kubernetes_input
    type: kubernetes_container
    pod_name: '{{ $pod_name }}'
    container_name: '{{ $container_name }}'
    cluster_name: '{{ $cluster_name }}'
    start_at: '{{ $start_at }}'
    enable_nested_json_parser: false

  - id: k8s_input_router
    type: router
    routes:
      # {{ if $enable_access_log }}
      - expr: "$labels.stream == 'stdout'"
        output: access_parser
        labels:
          log_type: 'nginx.access'
          plugin_id: '{{ .id }}'
      # {{ end }}
      # {{ if $enable_error_log }}
      - expr: '$labels.stream == "stderr" and $record.message matches "\\d{4}\\/\\d{2}\\/\\d{2} \\d{2}:\\d{2}:\\d{2} \\[\\w+\\] \\d+\\.\\d+: "'
        output: error_regex_parser
        labels:
          log_type: 'nginx.error'
          plugin_id: '{{ .id }}'
      # {{ end }}
  # {{ end }}

  # {{ if and $enable_access_log (eq $source "file") }}
  - id: nginx_access_reader
    type: file_input
    include:
      - '{{ $access_log_path }}'
    start_at: '{{ $start_at }}'
    labels:
      log_type: 'nginx.access'
      plugin_id: '{{ .id }}'
# {{ if $encoding }}
    encoding: '{{ $encoding }}'
# {{ end }}
    output: access_parser
  # {{ end }}

  # {{ if and $enable_error_log (eq $source "file") }}
  - id: nginx_error_reader
    type: file_input
    include:
      - '{{ $error_log_path }}'
    start_at: '{{ $start_at }}'
    multiline:
      line_start_pattern: '^\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2} \[\w+\] (?P<pid>\d+).(?P<tid>\d+): '
    labels:
      log_type: 'nginx.error'
      plugin_id: '{{ .id }}'
# {{ if $encoding }}
    encoding: '{{ $encoding }}'
# {{ end }}
    output: error_regex_parser
  # {{ end }}

  # {{ if eq $log_format "default" }}
  - id: access_parser
    type: regex_parser
    regex: '^(?P<remote_addr>[^ ]*) - (?P<remote_user>[^ ]*) \[(?P<time_local>[^\]]*)\] "(?P<method>\S+) +(?P<path>[^ ]*) ((?P<protocol>[^/]*)/(?P<protocol_version>.*)|.*)?" (?P<status>[^ ]*) (?P<body_bytes_sent>[^ ]*) "(?P<http_referer>[^\"]*)" "(?P<http_user_agent>[^\"]*)"'
    timestamp:
      parse_from: time_local
      layout: '%d/%b/%Y:%H:%M:%S %z'
    severity:
      parse_from: status
      preserve_to: status
      mapping:
        info: 2xx
        notice: 3xx
        warning: 4xx
        error: 5xx
    output: {{ .output }}
  # {{ end }}

  # {{ if eq $log_format "observiq" }}
  - id: access_parser
    type: json_parser
    timestamp:
      parse_from: time_local
      layout: '%d/%b/%Y:%H:%M:%S %z'
    severity:
      parse_from: status
      preserve_to: status
      mapping:
        info: 2xx
        notice: 3xx
        warning: 4xx
        error: 5xx

  - id: request_parser
    type: regex_parser
    parse_from: $record.request
    preserve_to: $record.request
    if: '$record.request != nil and $record.request matches "\\S+ +[^ ]* "'
    regex: '(?P<method>\S+) +(?P<path>[^ ]*) ((?P<protocol>[^/]*)/(?P<protocol_version>.*)|.*)?'
    output: {{ .output }}
  # {{ end }}

  # {{ if $enable_error_log }}
  - id: error_regex_parser
    type: regex_parser
    regex: '^(?P<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<log_level>\w+)\] (?P<pid>\d+).(?P<tid>\d+): (?P<message>.*)'
    timestamp:
      parse_from: time
      layout: '%Y/%m/%d %T'
    severity:
      parse_from: log_level
      mapping:
        critical: crit
        emergency: emerg
    output: {{ .output }}
  # {{ end }}