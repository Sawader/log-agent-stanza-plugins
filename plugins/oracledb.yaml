version: 0.0.11
title: OracleDB
description: Log parser for OracleDB
parameters:
  - name: enable_audit_log
    label: Audit Logs
    description: Enable to collect OracleDB audit logs
    type: bool
    default: true
  - name: audit_log_path
    label: Audit Log Path
    description: Path to the audit log file
    type: string
    default: "/u01/app/oracle/product/*/dbhome_1/admin/*/adump/*.aud"
    relevant_if:
      enable_audit_log:
        equals: true
  - name: enable_truncate_audit_action
    label: Truncate Audit Action
    description: Whether or not to truncate the audit log action field
    type: bool
    default: true
  - name: enable_alert_log
    label: Alert Logs
    description: Enable to collect OracleDB alert logs
    type: bool
    default: true
  - name: alert_log_path
    label: Alert Log Path
    description: Path to the alert log file
    type: string
    default: "/u01/app/oracle/product/*/dbhome_1/diag/rdbms/*/*/trace/alert_*.log"
    relevant_if:
      enable_alert_log:
        equals: true
  - name: enable_listener_log
    label: Listener Logs
    description: Enable to collect OracleDB listener logs
    type: bool
    default: true
  - name: listener_log_path
    label: Listener Log Path
    description: Path to the listener log file
    type: string
    default: "/u01/app/oracle/product/*/dbhome_1/diag/tnslsnr/*/listener/alert/log.xml"
    relevant_if:
      enable_listener_log:
        equals: true
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
     - beginning
     - end
    default: end

# Set Defaults
# {{$enable_audit_log := default true .enable_audit_log}}
# {{$audit_log_path := default "/u01/app/oracle/product/*/dbhome_1/admin/*/adump/*.aud" .audit_log_path}}
# {{$enable_truncate_audit_action := default true .enable_truncate_audit_action}}
# {{$enable_alert_log := default true .enable_alert_log}}
# {{$alert_log_path := default "/u01/app/oracle/product/*/dbhome_1/diag/rdbms/*/*/trace/alert_*.log" .alert_log_path}}
# {{$enable_listener_log := default true .enable_listener_log}}
# {{$listener_log_path := default "/u01/app/oracle/product/*/dbhome_1/diag/rdbms/*/*/alert/log.xml" .listener_log_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  # {{ if $enable_audit_log }}
  - id: audit_reader
    type: file_input
    include:
      - {{ $audit_log_path }}
    start_at: {{ $start_at }}
    multiline:
      line_start_pattern: '\w+\s+\w+\s{1,2}\d{1,2}\s+\d{2}:\d{2}:\d{2}\s+\d{4}\s+[-+]\d{2}:\d{2}\n|^Audit [fF]ile '
    labels:
      log_type: 'oracledb.audit'
      plugin_id: {{ .id }}
    output: audit_router

  - id: audit_router
    type: router
    routes:
      - output: audit_regex_parser_action
        expr: $ matches '\\w+ \\w+\\s{1,2}\\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d{4} [-+]\\d{2}:\\d{2}\\nLENGTH\\s:\\s\\D\\d+\\D\\nACTION'
      - output: audit_regex_parser_session
        expr: $ matches '\\w+ \\w+\\s{1,2}\\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d{4} [-+]\\d{2}:\\d{2}\\nLENGTH:\\s\\D\\d+\\D\\nSESSION'
      - output: server_start_regex_parser
        expr: $ startsWith 'Audit file '

  - id: audit_regex_parser_action
    type: regex_parser
    regex: '^(?P<timestamp>\w+ \w+\s{1,2}\d{1,2} \d{2}:\d{2}:\d{2} \d{4} [-+]\d{2}:\d{2})\nLENGTH : \D(?P<length>\d*)\D\nACTION :\[\d+\]\s+\D(?P<action>[\d\w[:ascii:]]+?)\D\nDATABASE USER:\[\d+\]\s+\D(?P<database_user>[^\s]+)\D\n(PRIVILEGE :\[\d+\]\s+\D(?P<privilege>[^\s]+)\D\n)?(CLIENT USER:\[\d+\]\s+\D(?P<client_user>[^\s]+|)\D\n)?(CLIENT TERMINAL:\[\d+\]\s+\D(?P<client_terminal>[^\s]+|)\D\n)?(STATUS:\[\d+\]\s+\D(?P<status_code>[^\s]+|)\D\n)?(DBID:\[\d+\]\s\D(?P<dbid>[^\s]+|)\D\n)?(SESSIONID:\[\d+\]\s+\D(?P<sessionid>[^\s]+|)\D\n)?(USERHOST:\[\d+\]\s+\D(?P<userhost>[^\s]+|)\D\n)?(CLIENT ADDRESS:\[\d+\]\s+\D(?P<client_address>[^\s]+|)\D\n)?(ACTION NUMBER:\[\d+\]\s+\D(?P<action_number>[^\s]+|)\D\n)?'
    timestamp:
      parse_from: timestamp
      layout: '%a %h %g %H:%M:%S %Y %j'
    # {{ if $enable_truncate_audit_action }}
    output: audit_action_restructurer
    # {{ else }}
    output: {{ .output }}
    # {{ end }}

  - id: audit_regex_parser_session
    type: regex_parser
    regex: '^(?P<timestamp>\w+ \w+\s{1,2}\d{1,2} \d{2}:\d{2}:\d{2} \d{4} [-+]\d{2}:\d{2})\nLENGTH: \D(?P<length>\d*)\D\n(SESSIONID:\[\d+\]\s+\D(?P<sessionid>[^\s]+|)\D[\n\s]+)?(ENTRYID:\[\d+\]\s+\D(?P<entryid>[^\s]+|)\D[\n\s]+)?(STATEMENT:\[\d+\]\s+\D(?P<statement>[^\s]+|)\D[\n\s]+)?(USERID:\[\d+\]\s+\D(?P<userid>[^\s]+|)\D[\n\s]+)?(USERHOST:\[\d+\]\s+\D(?P<userhost>[^\s]+|)\D[\n\s]+)?(TERMINAL:\[\d+\]\s+\D(?P<terminal>[\d\w[:ascii:]]+?|)\D[\n\s]+)?ACTION:\[\d+\]\s+\D(?P<action>[\d\w[:ascii:]]+?|)\D[\n\s]+(RETURNCODE:\[\d+\]\s+\D(?P<returncode>[^\s]+|)\D[\n\s]+)?(COMMENT\$TEXT:\[\d+\]\s+\D(?P<comment_text>[^"]+|)\D[\n\s]+)?(LOGOFF\$PREAD:\[\d+\]\s+\D(?P<logoff_pread>[^"]+|)\D[\n\s]+)?(LOGOFF\$LREAD:\[\d+\]\s+\D(?P<logoff_lread>[^"]+|)\D[\n\s]+)?(LOGOFF\$LWRITE:\[\d+\]\s+\D(?P<logoff_lwrite>[^"]+|)\D[\n\s]+)?(LOGOFF\$DEAD:\[\d+\]\s+\D(?P<logoff_dead>[^"]+|)\D[\n\s]+)?(OBJ\$CREATOR:\[\d+\]\s+\D(?P<obj_creator>[^"]+|)\D[\n\s]+)?(OBJ\$NAME:\[\d+\]\s+\D(?P<obj_name>[^"]+|)\D[\n\s]+)?(OBJ\$PRIVILEGES:\[\d+\]\s+\D(?P<obj_privileges>[^"]+|)\D[\n\s]+)?(AUTH\$GRANTEE:\[\d+\]\s+\D(?P<auth_grantee>[^"]+|)\D[\n\s]+)?(OS\$USERID:\[\d+\]\s+\D(?P<os_userid>[^\s]+|)\D[\n\s]+)?(DBID:\[\d+\]\s+\D(?P<dbid>[^\s]+|)\D[\n\s]+)?(SESSIONCPU:\[\d+\]\s+\D(?P<sessioncpu>\d+|)\D[\n\s]+)?(PRIV\$USED:\[\d+\]\s+\D(?P<priv_user>[^\s]+|)\D[\n\s]+)?'
    timestamp:
      parse_from: timestamp
      layout: '%a %h %g %H:%M:%S %Y %j'
    # {{ if $enable_truncate_audit_action }}
    output: audit_action_restructurer
    # {{ else }}
    output: {{ .output }}
    # {{ end }}

  - id: server_start_regex_parser
    type: regex_parser
    regex: '(?P<message>[\d\w[:ascii:]]+)'
    output: {{ .output }}

  - id: audit_action_restructurer
    type: restructure
    ops:
      - add:
          field: "action"
          value_expr: 'len($.action) > 150000 ? $.action[0:150000] + "... Action has " + $.length + " characters which is over the 150000 characters limit, truncating action" : $.action'
    output: {{ .output }}
  # {{ end }}

  # {{ if $enable_alert_log }}
  - id: alert_reader
    type: file_input
    include:
      - {{ $alert_log_path }}
    start_at: {{ $start_at }}
    multiline:
      line_start_pattern: '^\w+ \w+ \d{2} \d{2}:\d{2}:\d{2} \d{4}|\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+|^<msg time=\D\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+'
    labels:
      log_type: 'oracledb.alert'
      plugin_id: {{ .id }}
    output: alert_router

  - id: alert_router
    type: router
    routes:
      - output: xml_alert_regex_parser
        expr: $ matches '^<msg time=\\D\\d{4}-\\d{2}-\\d{2}T\\d{1,}:\\d{2}:\\d{2}.\\d+[+-]\\d+:\\d+'
      - output: alert121_regex_parser
        expr: $ matches '^\\w+ \\w+ \\d{2} \\d{2}:\\d{2}:\\d{2} \\d{4}'
      - output: alert122_regex_parser
        expr: $ matches '^\\d{4}-\\d{2}-\\d{2}T\\d{1,}:\\d{2}:\\d{2}.\\d+[+-]\\d+:\\d+'
  
  # Alert log looks to be xml attempt to parse with regex
  - id: xml_alert_regex_parser
    type: regex_parser
    regex: '^<msg\s+time=\D(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2})\D(\s+)?(org_id=\D(?P<org_id>[\w\d]+)\D)?(\s+)?(comp_id=\D(?P<comp_id>[\w\d]+)\D)?(\s+)?(msg_id=\D(?P<msg_id>[\w\d:]+)\D)?(\s+)?(type=\D(?P<type>\w+)\D)?(\s+)?(group=\D(?P<group>[\w ]+)\D)?(\s+)?(level=\D(?P<level>\d+)\D)?(\s+)?(host_id=\D(?P<host_id>[\.\w\d-_]+)\D)?(\s+)?(host_addr=\D(?P<host_addr>[\d\.]+)\D)?(\s+)?(module=\D(?P<module>[\w-\s@()]+)\D)?(\s+)?(pid=\D(?P<pid>\d+)\D)?(\s+)?(\s+)?(version=\D(?P<version>\d+)\D)?(\s+)?>\s+<txt>(?P<txt>[\d\D\s]+)</txt>(\s+)?</msg>'
    timestamp:
      parse_from: timestamp
      layout: '%Y-%m-%dT%T.%L%j'
    output: {{ .output }}

  # Alert log parser for 12.1 timestamp
  - id: alert121_regex_parser
    type: regex_parser
    regex: '(?P<timestamp>\w+ \w+ \d{2} \d{2}:\d{2}:\d{2} \d{4})\n((?P<message>[\d\w[:ascii:]]*))?'
    timestamp:
      parse_from: timestamp
      layout: '%c'
    output: regex_empty_message_filter

  # Alert log parser for 12.2 timestamp
  - id: alert122_regex_parser
    type: regex_parser
    regex: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+)\n((?P<message>[\d\w[:ascii:]]*))?'
    timestamp:
      parse_from: timestamp
      layout: