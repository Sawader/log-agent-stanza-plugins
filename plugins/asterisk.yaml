
# Plugin Info
version: 0.0.3
title: Asterisk
description: Log Parser for Asterisk
min_stanza_version: 1.2.3
parameters:
  - name: file_log_path
    label: File Path
    description: Specify a single path or multiple paths to read one or many files. You may also use a wildcard (*) to read multiple files within a directory.
    type: strings
    required: true
  - name: exclude_file_log_path
    label: Exclude File Path
    description: Specify a single path or multiple paths to exclude one or many files from being read. You may also use a wildcard (*) to exclude multiple files from being read within a directory.
    type: strings
    default: []
    advanced_config: true
  - name: encoding
    label: Encoding
    description: Specify the encoding of the file(s) being read. In most cases, you can leave the default option selected.
    type: enum
    valid_values:
      - utf-8
      - utf-16le
      - utf-16be
      - ascii
      - big5
    default: utf-8
    advanced_config: true
  - name: timestamp_format
    label: Timestamp Format
    description: Specify the timestamp format in the log file(s) being read. In most cases, you can leave the default option selected.
    type: enum
    valid_values:
      - 'ISO 8601'
      - 'ISO 8501 with Milliseconds'
    default: 'ISO 8601'
    advanced_config: true
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
      - beginning
      - end
    default: end
# Set Defaults
# {{$timestamp_format := default "ISO 8601" .timestamp_format}}
# {{$encoding := default "utf-8" .encoding}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  - type: file_input
    start_at: '{{ $start_at }}'
    include:
# {{ range $i, $fp := .file_log_path  }}
      - '{{ $fp }}'
# {{ end }}
# {{ if .exclude_file_log_path }}
    exclude:
  # {{ range $i, $efp := .exclude_file_log_path  }}
      - '{{ $efp }}'
  # {{ end }}
# {{ end }}
# {{ if $encoding }}
    encoding: '{{ $encoding }}'
# {{ end }}
    include_file_name: true
    labels:
      plugin_id: {{ .id }}
      log_type: 'asterisk'

  - type: router
    default: asterisk_start_regex_parser
    routes:
      - expr: '$record matches "^\\[[^\\]]+\\] [^\\[]+\\[[^\\]]+\\]"'
        output: asterisk_regex_parser

  - id: asterisk_regex_parser
    type: regex_parser
    regex: '^\[(?P<timestamp>[^\]]+)\] (?P<level>[^\[]+)\[(?P<pid>[^\]]+)\](\[?(?P<call_id>[^\]]+)\])? (?P<source_file>[^:]*): (?P<message>.*)$'
    timestamp:
      parse_from: timestamp
      # 2006-01-02 15:04:05.000 - milliseconds
      # 2006-01-02 15:04:05.000000 - mircoseconds
      # 2006-01-02 15:04:05.000000000- nanoseconds
      layout_type: gotime
      layout: '{{ if eq $timestamp_format "ISO 8601" }}2006-01-02 15:04:05{{ else if eq $timestamp_format "ISO 8501 with Milliseconds" }}2006-01-02 15:04:05.000{{ end }}'
    severity:
      parse_from: level
      mapping:
        debug: 
          - verbose
          - dtmf
    output: remove

  - id: asterisk_start_regex_parser
    type: regex_parser
    regex: '^\[(?P<timestamp>[^\]]+)\] (?P<message>.*)$'
    timestamp:
      parse_from: timestamp
      # 2006-01-02 15:04:05.000 - milliseconds
      # 2006-01-02 15:04:05.000000 - mircoseconds
      # 2006-01-02 15:04:05.000000000- nanoseconds
      layout_type: gotime
      layout: '{{ if eq $timestamp_format "ISO 8601" }}2006-01-02 15:04:05{{ else if eq $timestamp_format "ISO 8501 with Milliseconds" }}2006-01-02 15:04:05.000{{ end }}'
    output: remove

  - type: remove
    if: '$record.call_id != nil and not (len($record.call_id) > 0)'
    field: $record.call_id 
    output: {{ .output }}