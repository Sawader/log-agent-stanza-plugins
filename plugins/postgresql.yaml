version: 0.0.7
title: PostgreSQL
description: 'Log parser for PostgreSQL. This plugin expects the custom settings in postgresql.conf. See our help documentation for setup requirements.'
parameters:
  - name: postgresql_log_path
    label: PostgreSQL Log Path
    description: Path to the PostgreSQL log file
    type: string
    default: "/var/lib/pgsql/*/data/pg_log/postgresql-*.log"
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
     - beginning
     - end
    default: end

# Set Defaults
# {{$postgresql_log_path := default "/var/lib/pgsql/*/data/pg_log/postgresql-*.log" .postgresql_log_path}}
# {{$start_at := default "end" .start_at}}

# Pipeline Template
pipeline:
  - type: file_input
    include:
      - {{ $postgresql_log_path }}
    multiline:
      line_start_pattern: '^t=\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}'
    write_to: log_entry
    start_at: {{ $start_at }}
    labels:
      log_type: 'postgresql.general'
      plugin_id: {{ .id }}

  - id: general_regex_parser
    type: regex_parser
    parse_from: log_entry
    regex: '^t=(?P<time>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\s+[^\s]+)\s+p=(?P<process_id>\d*)\s+s=(?P<process_start_time>[^\.]*)\.[^\s]+\s+l=(?P<process_log_line>[^\s]*)\s+u=(?P<user_name>[^\s]*)\s+db=(?P<database>[^\s]*)\s+r=(?P<client_address>[^\s]*)\s*(LOG:\s*duration:\s*(?P<duration>[\w\.:]*)\s*ms\s*)?(?P<message>[\w\W]+)?'
    timestamp:
      parse_from: time
      layout: '%F %T %Z'

  - type: router
    default: client_address_regex_parser
    routes:
      - output: client_address_regex_parser
        expr: '$record.duration != ""'
        labels:
          log_type: 'postgresql.slow_query'

  - id: client_address_regex_parser
    if: '$record.client_address matches "[\\w\\.]*\\([\\d]*\\)"'
    type: regex_parser
    parse_from: $record.client_address
    regex: '(?P<client_address>[^\(]*)\((?P<client_address_port>[^\)]*)\)'
    output: statement_regex_parser

  - id: statement_regex_parser
    if: '$record.message matches "^STATEMENT:|^statement:"'
    type: regex_parser
    parse_from: $record.message
    regex: '(^STATEMENT:\s*|^statement:\s*)(?P<statement>[\w\W]+)'

  - id: sql_command_alter
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^ALTER"'
    ops:
      - add:
          field: "sql_command"
          value: "ALTER"

  - id: sql_command_commit
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^COMMIT"'
    ops:
      - add:
          field: "sql_command"
          value: "COMMIT"

  - id: sql_command_copy
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^COPY"'
    ops:
      - add:
          field: "sql_command"
          value: "COPY"

  - id: sql_command_create
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^CREATE"'
    ops:
      - add:
          field: "sql_command"
          value: "CREATE"

  - id: sql_command_delete
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^DELETE"'
    ops:
      - add:
          field: "sql_command"
          value: "DELETE"

  - id: sql_command_drop
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^DROP"'
    ops:
      - add:
          field: "sql_command"
          value: "DROP"

  - id: sql_command_grant
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^GRANT"'
    ops:
      - add:
          field: "sql_command"
          value: "GRANT"

  - id: sql_command_insert
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^INSERT"'
    ops:
      - add:
          field: "sql_command"
          value: "INSERT"

  - id: sql_command_revoke
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^REVOKE"'
    ops:
      - add:
          field: "sql_command"
          value: "REVOKE"

  - id: sql_command_rollback
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^ROLLBACK"'
    ops:
      - add:
          field: "sql_command"
          value: "ROLLBACK"

  - id: sql_command_select
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^SELECT"'
    ops:
      - add:
          field: "sql_command"
          value: "SELECT"

  - id: sql_command_truncate
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^TRUNCATE"'
    ops:
      - add:
          field: "sql_command"
          value: "TRUNCATE"

  - id: sql_command_update
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^UPDATE"'
    ops:
      - add:
          field: "sql_command"
          value: "UPDATE"

  - id: sql_command_vacuum
    type: restructure
    if: '$record.statement != nil and $record.statement matches "^VACUUM"'
    ops:
      - add:
          field: "sql_command"
          value: "VACUUM"

  - id: output_router
    type: router
    routes:
      - output: {{.output}}
        expr: 'true'
