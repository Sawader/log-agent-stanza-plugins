# Plugin Info
version: 0.0.9
title: VMware ESXi
description: Log parser for VMware ESXi
parameters:
  - name: listen_port
    label: Listen Port
    description: A port which the agent will listen for syslog messages
    type: int
    default: 5140
  - name: listen_ip
    label: Listen IP
    description: A syslog ip address of the form `<ip>`
    type: string
    default: "0.0.0.0"
    advanced_config: true
  - name: listen_address
    label: Listen Address
    description: Parameter Deprecated Use 'listen_ip' and 'listen_port' instead.
    type: string
    default: ""
    advanced_config: true
    hidden: true
  - name: enable_tls
    label: Enable TLS
    description: Enable TLS for the TCP listener
    type: bool
    default: false
  - name: certificate_file
    label: TLS certificate path
    description: File path for the X509 TLS certificate chain
    type: string
    default: "/opt/cert"
    required: true
    relevant_if:
      enable_tls:
        equals: true
  - name: private_key_file
    label: TLS private key path
    description: File path for the X509 TLS certificate chain
    type: string
    default: "/opt/key"
    required: true
    relevant_if:
      enable_tls:
        equals: true

# Set Defaults
# {{$listen_address := default "" .listen_address}}
# {{$length := len $listen_address}}
# {{$listen_ip := default "0.0.0.0" .listen_ip}}
# {{$listen_port := default 5140 .listen_port}}
# {{$enable_tls := default true .enable_tls}}
# {{$certificate_file := default "" .certificate_file}}
# {{$private_key_file := default "" .private_key_file}}

# Pipeline Template
pipeline:
  - id: esxi_input
    type: tcp_input
    listen_address: '{{ if eq $length 0 }}{{ $listen_ip }}:{{ $listen_port }}{{ else }}{{ $listen_address }}{{ end }}'
    labels:
      log_type: vmware_esxi
      plugin_id: {{ .id }}
    add_labels: true
    tls:
      enable: {{ $enable_tls }}
      certificate: {{ $certificate_file }}
      private_key: {{ $private_key_file }}
    output: timestamp_router
  - id: timestamp_router
    type: router
    default: {{ .output }}
    routes:
      - expr: '$record matches "^(<(?P<priority>[\\d]*)>)?(?P<timestamp>[a-zA-z]+ \\d{2} \\d{2}:\\d{2}:\\d{2}).*"'
        output: esxi_parser_1
      - expr: '$record matches "^(<(?P<priority>[\\d]*)>)?(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z) (?P<hostname>[^ ]+) (?P<service>[^:]+):.*"'
        output: esxi_parser_2
      - expr: '$record matches "^(<(?P<priority>[\\d]*)>)?(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z) (?P<hostname>[^ ]+) (?P<service>[^\\[]*)\\[(?P<pid>[^\\]]*)\\]:.*"'
        output: esxi_parser_3
      - expr: '$record matches "^(<(?P<priority>[\\d]*)>)?(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z) (?P<hostname>[^ ]+) (?P<service>[^:]*):.*"'
        output: esxi_parser_4
      - expr: '$record matches "^(<(?P<priority>[\\d]*)>)?(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+[+-]\\d{2}:\\d{2}) (?P<hostname>[^ ]+) (?P<service>[^:]*)(\\[(?P<pid>[^\\]]*)\\]:)?.*"'
        output: esxi_parser_5

  - id: esxi_parser_1
    type: regex_parser
    regex: '^(<(?P<priority>[\d]*)>)?(?P<timestamp>[a-zA-z]+ \d{2} \d{2}:\d{2}:\d{2}) (?P<hostname>[^ ]+) (?P<service>[^:]+) (?P<message>.*)'
    timestamp:
      parse_from: timestamp
      layout: '%b %d %H:%M:%S'

    output: severity_parser

  - id: esxi_parser_2
    type: regex_parser
    regex: '^(<(?P<priority>[\d]*)>)?(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z) (?P<hostname>[^ ]+) (?P<service>[^:]+): (?P<message>.*)'
    timestamp:
      parse_from: timestamp
      layout: '%Y-%m-%dT%H:%M:%S.%LZ'
    output: severity_parser

  - id: esxi_parser_3
    type: regex_parser
    regex: '^(<(?P<priority>[\d]*)>)?(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z) (?P