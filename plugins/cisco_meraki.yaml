# Plugin Info
version: 0.0.9
title: Cisco Meraki
description: Log parser for Cisco Meraki
min_stanza_version: 1.2.7
supported_platforms:
  - linux
  - windows
  - macos
parameters:
  - name: listen_port
    label: Listen Port
    description: A port which the agent will listen for syslog messages
    type: int
    default: 5140
  - name: listen_ip
    label: Listen IP
    description: A syslog ip address of the form `<ip>`
    type: string
    default: "0.0.0.0"
    advanced_config: true
  - name: listen_address
    label: Listen Address
    description: Parameter Deprecated Use `listen_ip` and `listen_port` instead.
    type: string
    default: ""
    advanced_config: true
    hidden: true

# Set Defaults
# {{$listen_address := default "" .listen_address}}
# {{$length := len $listen_address}}
# {{$listen_ip := default "0.0.0.0" .listen_ip}}
# {{$listen_port := default 5140 .listen_port}}

# Pipeline Template
pipeline:
  - id: meraki_input
    type: udp_input
    listen_address: '{{ if eq $length 0 }}{{ $listen_ip }}:{{ $listen_port }}{{ else }}{{ $listen_address }}{{ end }}'
    labels:
      log_type: cisco_meraki
      plugin_id: {{ .id }}
    add_labels: true

  - id: regex_router
    type: router
    default: catch_all_parser
    routes:
      - expr: '$record matches "^<[^>]+>[\\d]+\\s+[\\d\\.]+\\s+[^\\s]+\\s+[^\\s]+\\s+[\\s\\S]*"'
        output: meraki_parser

  - id: meraki_parser
    type: regex_parser
    regex: '^<(?P<priority>[^>]+)>(?P<version>[\d]+)\s*(?P<timestamp>[\d\.]*)\s*(?P<hostname>[^\s]*)\s*(?P<app_name>[^\s]*)\s*(?P<message>[\s\S]*)'
    timestamp:
      parse_from: timestamp
      layout_type: epoch
      layout: 's.ns'
    output: severity_parser

  # Severity Parser using piority field to get the severity
  - type: severity_parser
    if: '$record.priority != nil'
    parse_from: $record.priority
    mapping:
      emergency: [0,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128,136,144,152,160,168,176,184]
      alert: [1,9,17,25,33,41,49,57,65,73,81,89,97,105,113,121,129,137,145,153,161,169,177,185]
      critical: [2,10,18,26,34,42,50,58,66,74,82,90,98,106,114,122,130,138,146,154,162,170,178,186]
      error: [3,11,19,27,35,43,51,59,67,75,83,91,99,107,115,123,131,139,147,155,163,171,179,187]
      warning: [4,12,20,28,36,44,52,60,68,76,84,92,100,108,116,124,132,140,148,156,164,172,180,188]
      notice: [5,13,21,29,37,45,53,61,69,77,85,93,101,109,117,125,133,141,149,157,165,173,181,189]
      info: [6,14,22,30,38,46,54,62,70,78,86,94,102,110,118,126,134,142,150,158,166,174,182,190]
      debug: [7,15,23,31,39,47,55,63,71,79,87,95,103,111,119,127,135,143,151,159,167,175,183,191]
    output: message_router

  # Route messages to different regex's for further parsing. If a regex match is not found then don't parse message.
  - id: message_router
    type: router
    default: {{.output}}
    routes:
      - expr: '$record.message matches "^src=.*\\s*dst=.*\\s*protocol=.*\\s*sport=.*\\s*dport=.*\\s*translated_src_ip=.*\\s*translated_port=.*\\s*"'
        output: message_1_parser
      - expr: '$record.message matches "^src=.*\\s*dst=.*\\s*mac=.*\\s*protocol=.*\\s*sport=.*\\s*dport=.*"'
        output: message_2_parser
      - expr: '$record.message matches "^src=.*\\s*dst=.*\\s*mac=.*\\s*user=.*\\s*"'
        output: message_3_parser

  - id: message_1_parser
    type: regex_parser
    parse_from: $record.message
    regex: '^src=(?P<src>[^\s]*)\s*dst=(?P<dst>[^\s]*)\s*protocol=(?P<protocol>[^\s]*)\s*sport=(?P<sport>[^\s]*)\s*dport=(?P<dport>[^\s]*)\s*translated_src_ip=(?P<translated_src_ip>[^\s]*)\s*translated_port=(?P<translated_port>[^\s]*)\s*(?P<message>[\s\S]*)'
    output: {{.output}}

  - id: message_2_parser
    type: regex_parser
    parse_from: $record.message
    regex: '^src=(?P<src>[^\s]*)\s*dst=(?P<dst>[^\s]*)\s*mac=(?P<mac>[^\s]*)\s*protocol=(?P<protocol>[^\s]*)\s*sport=(?P<sport>[^\s]*)\s*dport=(?P<dport>[^\s]*)\s*(?P<message>[\s\S]*)'
    output: {{.output}}

  - id: message_3_parser
    type: regex_parser
    parse_from: $record.message
    regex: '^src=(?P<src>[^\s]*)\s*dst=(?P<dst>[^\s]*)\s*mac=(?P<mac>[^\s]*)\s*user=(?P<user>[^\s]*)\s*(?P<message>[\s\S]*)'
    output: {{.output}}

  - id: catch_all_parser
    if: '$record matches "^<[\\d]+>"'
    type: regex_parser
    regex: '^<(?P<priority>[^>]+)>(\s*)?(?P<message>[\s\S]*)'
    output: severity_parser
